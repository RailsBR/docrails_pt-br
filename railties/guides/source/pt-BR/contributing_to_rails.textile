h2. Contribuindo com o Rails

Este guia abrange as formas nas quais _você_ pode se tornar parte do desenvolvimento contínuo do Rails. Após lê-lo, você deve estar familiarizado com:

* Usar o Lighthouse para reportar problemas com o Rails
* Clonar o Rails edge e executar o conjunto de testes
* Ajudar a resolver problemas existentes
* Contribuir para a documentação do Rails
* Contribuir para o código do Rails

O Rails não é o "framework de alguém." Com o passar dos anos, centenas de pessoas contribuíram com código variando de um simples caractere a grandes mudanças arquiteturais, tudo com o objetivo de tornar o Rails melhor para todos. Mesmo se você ainda não se sente confortável escrevendo código, existe uma variedade de outras maneiras em que você pode contribuir, desde reportar problemas até testar patches e contribuir com a documentação.

endprologue.

h3. Reportando um Problema com o Rails

O Rails utiliza um "projeto do Lighthouse":http://rails.lighthouseapp.com/projects/8994-ruby-on-rails/ para rastrear os problemas (primariamente bugs e contribuições de código novo). Se você encontrou um bug no Rails, este é o lugar para começar.

NOTE: Bugs na versão mais recente do Rails provavelmente são os que obterão mais atenção. Além disso, a equipe do core Rails está sempre interessado em feedback daqueles que podem tirar tempo para testar o _Rails edge_ (o código da versão do Rails que está atualmente em desenvolvimento). Mais tarde neste Guia você descobrirá como obter o Rails edge para testar.

h4. Criando um Relatório de Bug

Se você encontrou um problema no Rails, pode começar "adicionando um novo ticket":http://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/new no Rails Lighthouse. No mínimo, seu ticket precisa de um título e um texto descritivo. Mas isto é somente o mínimo. Você deve incluir o maior número possível de informações relevantes. Você precisa no mínimo postar o exemplo de código que possua o problema. Melhor ainda é incluir um teste unitário que mostre como o comportamento esperado não está ocorrendo. Seu objetivo deve ser tornar fácil para você mesmo - e outras pessoas - replicar o bug e imaginar uma correção.

Você não deve atribuir o bug para um desenvolvedor específico do core (através da lista de seleção *Who's Responsible* (quem é responsável)) a menos que saiba ao certo qual desenvolvedor irá manusear qualquer patch. A equipe do core revisa os problemas e atribui os desenvolvedores e milestones para eles periodicamente.

Você deve definir tags para seu problema. Utilize a tag "bug" para reportar um bug, e adicione a tag "patch" se você está anexando um patch. Tente encontrar algumas tags relevantes na lista de tags existentes (que aparecerão logo que você começar a digitar no textbox *Choose some tags* (escolha algumas tags)), antes de criar novas tags.

Então não levante suas esperanças. A menos que tenha um bug do tipo "Código Vermelho, Missão Crítica, O Mundo está Chegando ao Fim", você está criando este ticket na esperança que outros com o mesmo problema possam colaborar com você para resolvê-lo. Não espere que o ticket automaticamente verá alguma atividade ou que outros pularão para corrigí-lo. Criar um ticket como este serve principalmente para ajudá-lo a iniciar no caminho de correção do problema e para os outros confirmarem com um comentário "Eu também estou tendo este problema".

h4. Tratamento Especial para Questões de Segurança

Se você encontrou uma vulnerabilidade de segurança no Rails, por favor *não* a reporte através de um ticket do Lighthouse. Os tickets do Lighthouse são públicos logo que são registrados. Em vez disso, você deve usar o endereço de email dedicado "security@rubyonrails.org":mailto:security@rubyonrails.org para reportar quaisquer vulnerabilidades. Este alias é monitorado e a equipe do core trabalhará com você para resolver de forma rápida e completamente tais vulnerabilidades.

h4. E Sobre Solicitações de Funcionalidades?

Por favor não coloque tickets de "solicitação de funcionalidade" no Lighthouse. Se há uma nova funcionalidade que você quer ver adicionada ao Rails, você mesmo terá que escrevê-la - ou convencer alguém a associar-se com você para escrever o código. Posteriormente neste guia você encontrará instruções detalhadas para propor um patch para o Rails. Se você inserir uma item da sua lista de desejos no Lighthouse sem código, pode aguardar que ele será marcado como "inválido" logo que for revisado.

h3. Rodando o Conjunto de Testes do Rails

Para seguir em frente enviando bugs para ajudar a resolver problemas existentes ou contribuindo com seu próprio código no Rails, você _deve_ ser capaz de executar o conjunto de testes do Rails. Nesta seção do guia você aprenderá como configurar os testes no seu computador.

h4. Instale o git

O Rails utiliza o git para controle do código fonte. Você não será capaz de fazer nada sem o código fonte do Rails, e isto é um pré-requisito. A "página inicial do git":http://git-scm.com/ possui instruções de instalação. Se você está no OS X, utilize o instalador "Git for OS X":http://code.google.com/p/git-osx-installer/ . Se você não conhece o git, existem uma variedade de recursos na rede que o ajudarão a aprender mais:

* "Everyday Git":http://www.kernel.org/pub/software/scm/git/docs/everyday.html lhe ensinará apenas o suficiente sobre o git para sobreviver.
* O "PeepCode screencast":https://peepcode.com/products/git sobre git ($9) é fácil de seguir.
* "GitHub":http://github.com/guides/home oferece links para uma variedade de recursos git.

h4. Obtenha o Código Fonte do Rails

Não faça um fork do repositório principal do Rails. Em vez disso, você precisa cloná-lo no seu computador. Navegue para o diretório onde você quer o código fonte (ele criará seu próprio subdiretório /rails) e execute:

<shell>
git clone git://github.com/rails/rails.git
cd rails
</shell>

h4. Configure e Execute os Testes

Todos os testes do Rails devem passar com qualquer código que você enviar, senão você não terá chance do código ser aceito. Isto significa que você precisa ser capaz de executar os testes. Para os testes que usam o banco de dados, isto quer dizer criar os bancos necessários. Se você está usando MySQL:

<shell>
mysql> create database activerecord_unittest;
mysql> create database activerecord_unittest2;
mysql> GRANT ALL PRIVILEGES ON activerecord_unittest.*
       to 'rails'@'localhost';
mysql> GRANT ALL PRIVILEGES ON activerecord_unittest2.*
       to 'rails'@'localhost';
</shell>

Se você está utilizando outro banco de dados, verifique os arquivos em +activerecord/test/connections+ no código fonte do Rails para informações de conexão padrão. Você pode editar estes arquivos se você _for obrigado_ a fornecer credenciais diferentes na sua máquina, mas obviamente você não deve enviar tais modificações de volta para o Rails.

Agora se você voltar a raiz do código do Rails na sua máquina e executar +rake+ sem nenhum parâmetro, deve ver cada teste em todos os componentes do Rails passarem. Se você quiser executar todos os testes do ActiveRecord (ou apenas um) com outro adaptador de banco de dados, execute isto a partir do diretório +activerecord+:

<shell>
rake test_sqlite3
rake test_sqlite3 TEST=test/cases/validations_test.rb
</shell>

Você pode mudar +sqlite3+ por +jdbcmysql+, +jdbcsqlite3+, +jdbcpostgresql+, +mysql+ ou +postgresql+. Verifique o arquivo +activerecord/RUNNING_UNIT_TESTS+ para informações sobre rodar mais testes específicos de banco de dados, ou o arquivo +ci/ci_build.rb+ para ver o conjunto de testes que o servidor de integração contínua do Rails executa.



NOTE: Se você está trabalhando com código do Active Record, deve se assegurar que os testes passem pelo menos para MySQL, PostgreSQL, SQLite 2, e SQLite 3. Diferenças sutis entre os vários adaptadores de bancos de dados Active Record tem estado por trás da rejeição de muitos patches que pareciam OK quando testados somente com o MySQL.

h3. Ajudando a Resolver Problemas Existentes

Como próximo passo além de reportar problemas, você pode ajudar a equipe do core a resolver problemas existentes. Se você checar a lista de "tickets abertos":http://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets?q=state%3Aopen no Lighthouse, encontrará centenas de problemas já exigindo atenção. O que você pode fazer por estes? Na verdade, bastante:

h4. Verificar Relatórios de Bug

Para iniciantes, ele ajuda apenas a verificar relatórios de bug. Você pode reproduzir o problema reportado no seu computador? Se sim, pode adicionar um comentário ao ticket dizendo que você está vendo a mesma coisa.
For starters, it helps to just verify bug reports. Can you reproduce the reported issue on your own computer? If so, you can add a comment to the ticket saying that you're seeing the same thing.

If something is very vague, can you help squish it down into something specific? Maybe you can provide additional information to help reproduce a bug, or eliminate needless steps that aren't required to help demonstrate the problem.

If you find a bug report without a test, it's very useful to contribute a failing test. This is also a great way to get started exploring the Rails source: looking at the existing test files will teach you how to write more tests for Rails. New tests are best contributed in the form of a patch, as explained later on in the "Contributing to the Rails Code" section.

Anything you can do to make bug reports more succinct or easier to reproduce is a help to folks trying to write code to fix those bugs - whether you end up writing the code yourself or not.

h4. Testing Patches

You can also help out by examining patches that have been submitted to Rails via Lighthouse. To apply someone's changes you need to first create a branch of the Rails source code:

<shell>
git checkout -b testing_branch
</shell>

Then you can apply their patch:

<shell>
git am < their-patch-file.diff
</shell>

After applying a patch, test it out! Here are some things to think about:

* Does the patch actually work?
* Are you happy with the tests? Can you follow what they're testing? Are there any tests missing?
* Does the documentation still seem right to you?
* Do you like the implementation? Can you think of a nicer or faster way to implement a part of their change?

Once you're happy that the patch contains a good change, comment on the Lighthouse ticket indicating your approval. Your comment should indicate that you like the change and what you like about it. Something like:

<blockquote>
I like the way you've restructured that code in generate_finder_sql, much nicer. The tests look good too.
</blockquote>

If your comment simply says "+1", then odds are that other reviewers aren't going to take it too seriously. Show that you took the time to review the patch. Once three people have approved it, add the "verified" tag. This will bring it to the attention of a core team member who will review the changes looking for the same kinds of things.

h3. Contributing to the Rails Documentation

Another area where you can help out if you're not yet ready to take the plunge to writing Rails core code is with Rails documentation. You can help with the Rails Guides or the Rails API documentation.

TIP: "docrails":http://github.com/lifo/docrails/tree/master is the documentation branch for Rails with an *open commit policy*. You can simply PM "lifo":http://github.com/lifo on Github and ask for the commit rights. Documentation changes made as part of the "docrails":http://github.com/lifo/docrails/tree/master project, are merged back to the Rails master code from time to time. Check out the "original announcement":http://weblog.rubyonrails.org/2008/5/2/help-improve-rails-documentation-on-git-branch for more details.

h4. The Rails Guides

The "Rails Guides":http://guides.rubyonrails.org/ are a set of online resources that are designed to make people productive with Rails and to understand how all of the pieces fit together. These guides (including this one!) are written as part of the "docrails":http://github.com/lifo/docrails/tree/master project. If you have an idea for a new guide, or improvements for an existing guide, you can refer to the "contribution page":contribute.html for instructions on getting involved.

h4. The Rails API Documentation

The "Rails API documentation":http://api.rubyonrails.org/ is automatically generated from the Rails source code via "RDoc":http://rdoc.rubyforge.org/. If you find some part of the documentation to be incomplete, confusing, or just plain wrong, you can step in and fix it.

To contribute an update to the API documentation, you can contact "lifo":http://github.com/lifo on GitHub and ask for commit rights to the docrails repository and push your changes to the docrails repository. Please follow the "docrails RDoc conventions":http://wiki.github.com/lifo/docrails/rails-api-documentation-conventions when contributing the changes.

h3. The Rails Wiki

The "Rails wiki":http://wiki.rubyonrails.org/ is a collection of user-generated and freely-editable information about Rails. It covers everything from getting started to FAQs to how-tos and popular plugins. To contribute to the wiki, just find some useful information that isn't there already and add it. There are style guidelines to help keep the wiki a coherent resources; see the section on "contributing to the wiki":http://wiki.rubyonrails.org/#contributing_to_the_wiki for more details.

h3. Contributing to the Rails Code

When you're ready to take the plunge, one of the most helpful ways to contribute to Rails is to actually submit source code. Here's a step-by-step listing of the things you need to do to make this a successful experience.

h4. Learn the Language and the Framework

Learn at least _something_ about Ruby and Rails. If you don’t understand the syntax of the language, common Ruby idioms, and the code that already exists in Rails, you’re unlikely to be able to build a good patch (that is, one that will get accepted). You don’t have to know every in-and-out of the language and the framework; some of the Rails code is fiendishly complex. But Rails is probably not appropriate as the first place that you ever write Ruby code. You should at least understand (though not necessarily memorize) "The Ruby Programming Language":http://www.amazon.com/gp/product/0596516177?ie=UTF8&linkCode=as2&camp=1789&creative=390957&creativeASIN=0596516177 and have browsed the Rails source code.

h4. Fork the Rails Source Code

Fork Rails. You’re not going to put your patches right into the master branch, OK? This is where you need that copy of Rails that you cloned earlier. Think of a name for your new branch and run

<shell>
git checkout -b my_new_branch
</shell>

It doesn’t really matter what name you use, because this branch will only exist on your local computer.

h4. Write Your Code

Now get busy and add your code to Rails (or edit the existing code). You’re on your branch now, so you can write whatever you want (you can check to make sure you’re on the right branch with +git branch -a+). But if you’re planning to submit your change back for inclusion in Rails, keep a few things in mind:

* Get the code right
* Use Rails idioms and helpers
* Include tests that fail without your code, and pass with it
* Update the documentation

h4. Sanity Check

You should not be the only person who looks at the code before you submit it. You know at least one other Rails developer, right? Show them what you’re doing and ask for feedback. Doing this in private before you push a patch out publicly is the “smoke test” for a patch: if you can’t convince one other developer of the beauty of your code, you’re unlikely to convince the core team either.

h4. Commit Your Changes

When you're happy with the code on your computer, you need to commit the changes to git:

<shell>
git commit -a -m "Here is a commit message"
</shell>

h4. Update Rails

Update your copy of Rails. It’s pretty likely that other changes to core Rails have happened while you were working. Go get them:

<shell>
git checkout master
git pull
</shell>

Now reapply your patch on top of the latest changes:

<shell>
git checkout my_new_branch
git rebase master
</shell>

No conflicts? Tests still pass? Change still seems reasonable to you? Then move on.

h4. Create a Patch

Now you can create a patch file to share with other developers (and with the Rails core team). Still in your branch, run

<shell>
git commit -a
git format-patch master --stdout > my_new_patch.diff
</shell>

Sanity check the results of this operation: open the diff file in your text editor of choice and make sure that no unintended changes crept in.

h4. Create a Lighthouse Ticket

Now create a ticket with your patch. Go to the "new ticket":http://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/new page at Lighthouse. Fill in a reasonable title and description, remember to attach your patch file, and tag the ticket with the ‘patch’ tag and whatever other subject area tags make sense.

h4. Get Some Feedback

Now you need to get other people to look at your patch, just as you've looked at other people's patches. You can use the rubyonrails-core mailing list or the #rails-contrib channel on IRC freenode for this. You might also try just talking to Rails developers that you know.

h4. Iterate as Necessary

It’s entirely possible that the feedback you get will suggest changes. Don’t get discouraged: the whole point of contributing to an active open source project is to tap into community knowledge. If people are encouraging you to tweak your code, then it’s worth making the tweaks and resubmitting. If the feedback is that your code doesn’t belong in the core, you might still think about releasing it as a plugin.

And then...think about your next contribution!

h3. Changelog

"Lighthouse ticket":http://rails.lighthouseapp.com/projects/16213-rails-guides/tickets/64

* March 2, 2009: Initial draft by "Mike Gunderloy":credits.html#mgunderloy

